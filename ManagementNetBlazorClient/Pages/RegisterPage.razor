@page "/identity/account/register"
@layout AuthenticationLayout

<div class="container">    
    <div class="row">
        <div class="col-lg-5"></div>
        <div class="col-lg-2" style="width:450px;margin-top:5px">
                     <EditForm Enhance Model="User" OnInvalidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                           <div class="card bg-dark d-flex justify-content-center" style="opacity:0.5;margin-top:5%;border-radius:10px;color:white">
                                <div class="card-header text-center fs-5">Register an account</div>
                                 <div class="container">
                                     <div class="row">
                                         <div class="col-lg-4 col-md-4 col-sm-4"></div>
                                         <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                            <img  style="border-radius:20px" src="Images/CompanyLogos/LogoCompany.jpg" height="50" width="50"/>
                                         </div>
                                       <div class="col-lg-4 col-md-4 col-sm-4"></div>
                                      </div>
                                 </div>

                            <div class="card-body">
                                <div class="form-group">
                                   <label class="form-label"> FullName </label>
                                   <InputText @bind-Value="User.FullName" class="form-control"></InputText>
                                 </div>
                                <div class="form-group mt-3">
                                   <label class="form-label"> Email </label>
                                   <InputText @bind-Value="User.Email" class="form-control"></InputText>
                                </div>
                                <div class="form-group mt-3">
                                   <label class="form-label"> Password </label>
                                   <InputText type="password" @bind-Value="User.Password" class="form-control"></InputText>
                                </div>
                                <div class="form-group mt-3">
                                    <label class="form-label">Confirm Password </label>
                                    <InputText type="password" @bind-Value="User.ConfirmPassword" class="form-control"></InputText>
                                </div>
                                <div class="form-group mt-3">
                                   @if (ShowLoadingButton)
                                    {
                                      <ButtonLoadingSpinner></ButtonLoadingSpinner>
                                     }
                                   else
                                    {
                                      <button class="btn btn-primary float-end" type="submit">Register</button>
                                    }
                                  </div>



                           </div>
                            <div class="card-footer">
                                  <span class="text-center">
                                      Have account already ? |
                                      <a class="btn-link" href="/identity/account/login">Sign In</a>

                                  </span>
                            </div>

                           </div>

                     </EditForm>

                     <div class="col-lg-5">
         </div>

        </div>
     </div>
</div>
@code{
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await ChekUserAuthentication();
    }
    async Task HandleRegistration()
    {
        ShowLoadingButton = true;

        var res = await accountService.CreateAsync(User);
        if (res.Flaag)
        {
            await DisplayDialog(res.Message, "Success");

            User = new();
        }
        else
        {
            await DisplayDialog(res.Message, "Alert!!");
        }
        ShowLoadingButton = false;

    }
    private async Task DisplayDialog(string content, string title)
    {
        await dialogService.AlertAsync(content, title);
    }
    private async Task ChekUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (!isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");
    }
}
